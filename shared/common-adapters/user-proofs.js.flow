// @flow
import type {PlatformsExpanded} from '../constants/types/more'
import type {Proof, SimpleProofState, SimpleProofMeta} from '../constants/tracker'
import {Component} from 'react'
import {Component} from 'react'
import type {SimpleProofState, SimpleProofMeta} from '../constants/tracker'

export type MissingProof = {
  type: PlatformsExpanded,
  message: string,
  onClick: (missingProof: MissingProof) => void,
}

export type Proof = {
  id: string,
  type: string,
  meta: ?SimpleProofMeta,
  humanUrl: ?string,
  profileUrl: ?string,
  name: string,
  state: SimpleProofState,
  isTracked: bool
}

type CommonProps = {
  style?: Object,
  loading?: boolean,
  username: ?string,
  onClickProofMenu?: ?(idx: number) => void,
  showingMenuIndex?: ?number,
}

export type Props = ({
  proofs: Array<Proof>,
} & CommonProps) | ({
  missingProofs: Array<MissingProof>,
} & CommonProps)

export default class ProofsRender extends Component<void, Props, void> {
  getRow: (idx: number) => React$Component<*,*,*>;
}

export default class Render extends Component<void, Props, void> {}

